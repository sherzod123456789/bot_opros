from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, PollAnswer
from main import dp, bot
from keyboards import key1, key2, callback
import sqlite3


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    with sqlite3.connect('oprosnik.db') as connect:
        cursor = connect.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                user_id INTEGER NOT NULL UNIQUE,
                interests TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS polls (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                owner_id INTEGER NOT NULL,
                question TEXT NOT NULL,
                options TEXT NOT NULL,
                FOREIGN KEY(owner_id) REFERENCES users(user_id)
            )
        ''')
        connect.commit()


# –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
create_tables()


@dp.message_handler(Command('start'))
async def start(message: Message):
    with sqlite3.connect('oprosnik.db') as connect:
        cursor = connect.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (name, user_id) VALUES (?, ?)
        ''', [message.chat.first_name, message.chat.id])
        connect.commit()
    await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç', reply_markup=key1)


@dp.callback_query_handler(callback.filter(action='reg'))
async def Registration(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question='–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?',
        options=[
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª',
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üö¢',
            '–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò üÜï',
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ üõí',
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üì±',
            '–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ü§£',
            '–ë–ª–æ–≥–∏ üé•',
            '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã üë®‚Äçüíº',
            '–ö—Ä–∏–ø—Ç–æ üìà',
            '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã üí≤',
        ],
        is_anonymous=True,
        allows_multiple_answers=True
    )


@dp.poll_answer_handler()
async def handle_poll_answer(poll: PollAnswer):
    interests = str(poll.option_ids)
    user_id = poll.user.id
    with sqlite3.connect('oprosnik.db') as connect:
        cursor = connect.cursor()
        cursor.execute('''
            UPDATE users SET interests = ? WHERE user_id = ?
        ''', [interests, user_id])
        connect.commit()
    await bot.send_message(user_id, 'DONE!!!', reply_markup=key2)


@dp.message_handler(Command('update'))
async def update(message: Message):
    with sqlite3.connect('oprosnik.db') as connect:
        cursor = connect.cursor()
        cursor.execute('''
            SELECT interests FROM users WHERE user_id = ?
        ''', [message.chat.id])
        database = cursor.fetchone()
        interests = database[0] if database else ''

    choosed = {
        '0': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª',
        '1': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üö¢',
        '2': '–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò üÜï',
        '3': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ üõí',
        '4': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üì±',
        '5': '–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ü§£',
        '6': '–ë–ª–æ–≥–∏ üé•',
        '7': '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã üë®‚Äçüíº',
        '8': '–ö—Ä–∏–ø—Ç–æ üìà',
        '9': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã üí≤',
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
    interests_list = interests.split(',') if interests else  []
    selected_interests = [choosed[i] for i in interests_list if i in choosed]
    interests_text = ', '.join(selected_interests) if selected_interests else '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
    await bot.send_message(
        chat_id=message.chat.id,
        text=f'–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n{interests_text}\n\n–û–±–Ω–æ–≤–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –≤—ã–±—Ä–∞–≤ –Ω–æ–≤—ã–µ —Ç–µ–º—ã:'
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
    await bot.send_poll(
        chat_id=message.chat.id,
        question='–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?',
        options=[
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª',
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üö¢',
            '–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò üÜï',
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ üõí',
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üì±',
            '–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ü§£',
            '–ë–ª–æ–≥–∏ üé•',
            '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã üë®‚Äçüíº',
            '–ö—Ä–∏–ø—Ç–æ üìà',
            '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã üí≤',
        ],
        is_anonymous=True,
        allows_multiple_answers=True
    )


# @dp.message_handler(Command('create_poll'))
# async def create_poll(message: Message):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
#     try:
#         _, question, *options = message.text.split('\n')
#         if len(options) < 2:
#             await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.')
#             return
#     except ValueError:
#         await bot.send_message(message.chat.id,
#                                '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_poll <–≤–æ–ø—Ä–æ—Å>\n<–≤–∞—Ä–∏–∞–Ω—Ç1>\n<–≤–∞—Ä–∏–∞–Ω—Ç2>\n...')
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     with sqlite3.connect('oprosnik.db') as connect:
#         cursor = connect.cursor()
#         cursor.execute('''
#             INSERT INTO polls (owner_id, question, options) VALUES (?, ?, ?)
#         ''', [message.chat.id, question, '\n'.join(options)])
#         connect.commit()
#         poll_id = cursor.lastrowid
#
#     await bot.send_message(message.chat.id, f'–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. ID –æ–ø—Ä–æ—Å–∞: {poll_id}')
#
#
# @dp.message_handler(Command('get_poll'))
# async def get_poll(message: Message):
#     try:
#         _, poll_id = message.text.split()
#         poll_id = int(poll_id)
#     except ValueError:
#         await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–ø—Ä–æ—Å–∞.')
#         return
#
#     with sqlite3.connect('oprosnik.db') as connect:
#         cursor = connect.cursor()
#         cursor.execute('''
#             SELECT question, options FROM polls WHERE id = ?
#         ''', [poll_id])
#         poll = cursor.fetchone()
#
#     if poll:
#         question, options = poll
#         options_list = options.split('\n')
#         await bot.send_poll(
#             chat_id=message.chat.id,
#             question=question,
#             options=options_list,
#             is_anonymous=False
#         )
#     else:
#         await bot.send_message(message.chat.id, '–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
